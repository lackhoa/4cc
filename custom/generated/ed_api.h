// Auto-generated by command C:\Users\vodan\4ed\code\custom\build\ad_meta.exe

#define ed_buffer_replace_range_sig() b32 ed_buffer_replace_range(App* app, Buffer_ID buffer_id, Range_i64 range, String string)
#define ed_push_buffer_base_name_sig() String8 ed_push_buffer_base_name(App* app, Arena* arena, Buffer_ID buffer_id)
#define ed_get_active_view_sig() View_ID ed_get_active_view(App* app, Access_Flag access)
#define ed_view_get_buffer_sig() Buffer_ID ed_view_get_buffer(App* app, View_ID view_id, Access_Flag access)
#define ed_view_get_cursor_pos_sig() i64 ed_view_get_cursor_pos(App* app, View_ID view_id)
#define ed_view_set_cursor_sig() b32 ed_view_set_cursor(App* app, View_ID view_id, Buffer_Seek seek)
#define ed_print_message_sig() void ed_print_message(App* app, String message)
#define ed_draw_string_oriented_sig() v2 ed_draw_string_oriented(App* app, Face_ID font_id, ARGB_Color color, String8 str, v2 point, u32 flags, v2 delta)
#define ed_get_string_advance_sig() f32 ed_get_string_advance(App* app, Face_ID font_id, String str)
#define ed_get_other_primary_view_sig() View_ID ed_get_other_primary_view(App* app, View_ID start_view, Access_Flag access, b32 vsplit_if_fail)
#define ed_is_view_to_the_right_sig() b32 ed_is_view_to_the_right(App* app, View_ID view)
#define ed_DEBUG_send_entry_sig() void ed_DEBUG_send_entry(Debug_Entry entry)
#define ed_draw_get_target_sig() Render_Target* ed_draw_get_target(App* app)
#define ed_vim_set_bottom_text_sig() void ed_vim_set_bottom_text(String msg)
#define ed_change_active_primary_view_sig() void ed_change_active_primary_view(App* app)
#define ed_push_token_lexeme_sig() String ed_push_token_lexeme(App* app, Arena* arena, Buffer_ID buffer, Token* token)
#define ed_get_next_input_sig() User_Input ed_get_next_input(App* app, Event_Property use_flags, Event_Property abort_flags)
#define ed_draw__push_vertices_sig() void ed_draw__push_vertices(Render_Target* target, Render_Vertex* vertices, i1 count, Vertex_Type type)
#define ed_push_object_transform_to_target_sig() void ed_push_object_transform_to_target(Render_Target* target, mat4* transform)
#define ed_get_token_it_on_current_line_sig() Token_Iterator_Array ed_get_token_it_on_current_line(App* app, Buffer_ID buffer, i64* line_end_pos)
#define ed_fui_editor_ui_loop_sig() b32 ed_fui_editor_ui_loop(App* app)
#define ed_view_set_buffer_named_sig() void ed_view_set_buffer_named(App* app, View_ID view, String8 name)
#define ed_seek_line_col_sig() Buffer_Seek ed_seek_line_col(i64 line, i64 col)
#define ed_push_image_sig() void ed_push_image(Render_Target* target, char* filename, v3 o, v3 x, v3 y, argb color, u32 prim_id)
#define ed_switch_to_mouse_panel_sig() void ed_switch_to_mouse_panel(App* app)
#define ed_mouse_viewport_id_sig() i1 ed_mouse_viewport_id(App* app)
#define ed_get_confirmation_from_user_sig() b32 ed_get_confirmation_from_user(App* app, String query)
#define ed_get_current_line_number_sig() i64 ed_get_current_line_number(App* app)
#define ed_system_get_path_sig() String ed_system_get_path(Arena* arena, System_Path_Code path_code)
#define ed_system_get_file_list_sig() File_List ed_system_get_file_list(Arena* arena, String directory)
#define ed_tkarr_read_sig() Token* ed_tkarr_read(Token_Iterator_Array* it)
#define ed_tkarr_inc_sig() Token* ed_tkarr_inc(Token_Iterator_Array* it)
#define ed_token_it_read_sig() Token* ed_token_it_read(Token_Iterator* it)
#define ed_token_it_inc_all_sig() Token* ed_token_it_inc_all(Token_Iterator* it)
#define ed_token_it_inc_sig() Token* ed_token_it_inc(Token_Iterator* it)
#define ed_token_it_dec_sig() Token* ed_token_it_dec(Token_Iterator* it)
#define ed_set_y_up_sig() void ed_set_y_up(Render_Target* target, Render_Config* config)
#define ed_draw_new_group_sig() Render_Config* ed_draw_new_group(Render_Target* target)
typedef b32 ed_buffer_replace_range_type(App* app, Buffer_ID buffer_id, Range_i64 range, String string);
typedef String8 ed_push_buffer_base_name_type(App* app, Arena* arena, Buffer_ID buffer_id);
typedef View_ID ed_get_active_view_type(App* app, Access_Flag access);
typedef Buffer_ID ed_view_get_buffer_type(App* app, View_ID view_id, Access_Flag access);
typedef i64 ed_view_get_cursor_pos_type(App* app, View_ID view_id);
typedef b32 ed_view_set_cursor_type(App* app, View_ID view_id, Buffer_Seek seek);
typedef void ed_print_message_type(App* app, String message);
typedef v2 ed_draw_string_oriented_type(App* app, Face_ID font_id, ARGB_Color color, String8 str, v2 point, u32 flags, v2 delta);
typedef f32 ed_get_string_advance_type(App* app, Face_ID font_id, String str);
typedef View_ID ed_get_other_primary_view_type(App* app, View_ID start_view, Access_Flag access, b32 vsplit_if_fail);
typedef b32 ed_is_view_to_the_right_type(App* app, View_ID view);
typedef void ed_DEBUG_send_entry_type(Debug_Entry entry);
typedef Render_Target* ed_draw_get_target_type(App* app);
typedef void ed_vim_set_bottom_text_type(String msg);
typedef void ed_change_active_primary_view_type(App* app);
typedef String ed_push_token_lexeme_type(App* app, Arena* arena, Buffer_ID buffer, Token* token);
typedef User_Input ed_get_next_input_type(App* app, Event_Property use_flags, Event_Property abort_flags);
typedef void ed_draw__push_vertices_type(Render_Target* target, Render_Vertex* vertices, i1 count, Vertex_Type type);
typedef void ed_push_object_transform_to_target_type(Render_Target* target, mat4* transform);
typedef Token_Iterator_Array ed_get_token_it_on_current_line_type(App* app, Buffer_ID buffer, i64* line_end_pos);
typedef b32 ed_fui_editor_ui_loop_type(App* app);
typedef void ed_view_set_buffer_named_type(App* app, View_ID view, String8 name);
typedef Buffer_Seek ed_seek_line_col_type(i64 line, i64 col);
typedef void ed_push_image_type(Render_Target* target, char* filename, v3 o, v3 x, v3 y, argb color, u32 prim_id);
typedef void ed_switch_to_mouse_panel_type(App* app);
typedef i1 ed_mouse_viewport_id_type(App* app);
typedef b32 ed_get_confirmation_from_user_type(App* app, String query);
typedef i64 ed_get_current_line_number_type(App* app);
typedef String ed_system_get_path_type(Arena* arena, System_Path_Code path_code);
typedef File_List ed_system_get_file_list_type(Arena* arena, String directory);
typedef Token* ed_tkarr_read_type(Token_Iterator_Array* it);
typedef Token* ed_tkarr_inc_type(Token_Iterator_Array* it);
typedef Token* ed_token_it_read_type(Token_Iterator* it);
typedef Token* ed_token_it_inc_all_type(Token_Iterator* it);
typedef Token* ed_token_it_inc_type(Token_Iterator* it);
typedef Token* ed_token_it_dec_type(Token_Iterator* it);
typedef void ed_set_y_up_type(Render_Target* target, Render_Config* config);
typedef Render_Config* ed_draw_new_group_type(Render_Target* target);
struct API_VTable_ed{
ed_buffer_replace_range_type *buffer_replace_range;
ed_push_buffer_base_name_type *push_buffer_base_name;
ed_get_active_view_type *get_active_view;
ed_view_get_buffer_type *view_get_buffer;
ed_view_get_cursor_pos_type *view_get_cursor_pos;
ed_view_set_cursor_type *view_set_cursor;
ed_print_message_type *print_message;
ed_draw_string_oriented_type *draw_string_oriented;
ed_get_string_advance_type *get_string_advance;
ed_get_other_primary_view_type *get_other_primary_view;
ed_is_view_to_the_right_type *is_view_to_the_right;
ed_DEBUG_send_entry_type *DEBUG_send_entry;
ed_draw_get_target_type *draw_get_target;
ed_vim_set_bottom_text_type *vim_set_bottom_text;
ed_change_active_primary_view_type *change_active_primary_view;
ed_push_token_lexeme_type *push_token_lexeme;
ed_get_next_input_type *get_next_input;
ed_draw__push_vertices_type *draw__push_vertices;
ed_push_object_transform_to_target_type *push_object_transform_to_target;
ed_get_token_it_on_current_line_type *get_token_it_on_current_line;
ed_fui_editor_ui_loop_type *fui_editor_ui_loop;
ed_view_set_buffer_named_type *view_set_buffer_named;
ed_seek_line_col_type *seek_line_col;
ed_push_image_type *push_image;
ed_switch_to_mouse_panel_type *switch_to_mouse_panel;
ed_mouse_viewport_id_type *mouse_viewport_id;
ed_get_confirmation_from_user_type *get_confirmation_from_user;
ed_get_current_line_number_type *get_current_line_number;
ed_system_get_path_type *system_get_path;
ed_system_get_file_list_type *system_get_file_list;
ed_tkarr_read_type *tkarr_read;
ed_tkarr_inc_type *tkarr_inc;
ed_token_it_read_type *token_it_read;
ed_token_it_inc_all_type *token_it_inc_all;
ed_token_it_inc_type *token_it_inc;
ed_token_it_dec_type *token_it_dec;
ed_set_y_up_type *set_y_up;
ed_draw_new_group_type *draw_new_group;
};
#if defined(STATIC_LINK_API)
internal b32 buffer_replace_range(App* app, Buffer_ID buffer_id, Range_i64 range, String string);
internal String8 push_buffer_base_name(App* app, Arena* arena, Buffer_ID buffer_id);
internal View_ID get_active_view(App* app, Access_Flag access);
internal Buffer_ID view_get_buffer(App* app, View_ID view_id, Access_Flag access);
internal i64 view_get_cursor_pos(App* app, View_ID view_id);
internal b32 view_set_cursor(App* app, View_ID view_id, Buffer_Seek seek);
internal void print_message(App* app, String message);
internal v2 draw_string_oriented(App* app, Face_ID font_id, ARGB_Color color, String8 str, v2 point, u32 flags, v2 delta);
internal f32 get_string_advance(App* app, Face_ID font_id, String str);
internal View_ID get_other_primary_view(App* app, View_ID start_view, Access_Flag access, b32 vsplit_if_fail);
internal b32 is_view_to_the_right(App* app, View_ID view);
internal void DEBUG_send_entry(Debug_Entry entry);
internal Render_Target* draw_get_target(App* app);
internal void vim_set_bottom_text(String msg);
internal void change_active_primary_view(App* app);
internal String push_token_lexeme(App* app, Arena* arena, Buffer_ID buffer, Token* token);
internal User_Input get_next_input(App* app, Event_Property use_flags, Event_Property abort_flags);
internal void draw__push_vertices(Render_Target* target, Render_Vertex* vertices, i1 count, Vertex_Type type);
internal void push_object_transform_to_target(Render_Target* target, mat4* transform);
internal Token_Iterator_Array get_token_it_on_current_line(App* app, Buffer_ID buffer, i64* line_end_pos);
internal b32 fui_editor_ui_loop(App* app);
internal void view_set_buffer_named(App* app, View_ID view, String8 name);
internal Buffer_Seek seek_line_col(i64 line, i64 col);
internal void push_image(Render_Target* target, char* filename, v3 o, v3 x, v3 y, argb color, u32 prim_id);
internal void switch_to_mouse_panel(App* app);
internal i1 mouse_viewport_id(App* app);
internal b32 get_confirmation_from_user(App* app, String query);
internal i64 get_current_line_number(App* app);
internal String system_get_path(Arena* arena, System_Path_Code path_code);
internal File_List system_get_file_list(Arena* arena, String directory);
internal Token* tkarr_read(Token_Iterator_Array* it);
internal Token* tkarr_inc(Token_Iterator_Array* it);
internal Token* token_it_read(Token_Iterator* it);
internal Token* token_it_inc_all(Token_Iterator* it);
internal Token* token_it_inc(Token_Iterator* it);
internal Token* token_it_dec(Token_Iterator* it);
internal void set_y_up(Render_Target* target, Render_Config* config);
internal Render_Config* draw_new_group(Render_Target* target);
#undef STATIC_LINK_API
#elif defined(DYNAMIC_LINK_API)
#ifndef STORAGE_CLASS
#define STORAGE_CLASS global
#endif
STORAGE_CLASS ed_buffer_replace_range_type *buffer_replace_range;
STORAGE_CLASS ed_push_buffer_base_name_type *push_buffer_base_name;
STORAGE_CLASS ed_get_active_view_type *get_active_view;
STORAGE_CLASS ed_view_get_buffer_type *view_get_buffer;
STORAGE_CLASS ed_view_get_cursor_pos_type *view_get_cursor_pos;
STORAGE_CLASS ed_view_set_cursor_type *view_set_cursor;
STORAGE_CLASS ed_print_message_type *print_message;
STORAGE_CLASS ed_draw_string_oriented_type *draw_string_oriented;
STORAGE_CLASS ed_get_string_advance_type *get_string_advance;
STORAGE_CLASS ed_get_other_primary_view_type *get_other_primary_view;
STORAGE_CLASS ed_is_view_to_the_right_type *is_view_to_the_right;
STORAGE_CLASS ed_DEBUG_send_entry_type *DEBUG_send_entry;
STORAGE_CLASS ed_draw_get_target_type *draw_get_target;
STORAGE_CLASS ed_vim_set_bottom_text_type *vim_set_bottom_text;
STORAGE_CLASS ed_change_active_primary_view_type *change_active_primary_view;
STORAGE_CLASS ed_push_token_lexeme_type *push_token_lexeme;
STORAGE_CLASS ed_get_next_input_type *get_next_input;
STORAGE_CLASS ed_draw__push_vertices_type *draw__push_vertices;
STORAGE_CLASS ed_push_object_transform_to_target_type *push_object_transform_to_target;
STORAGE_CLASS ed_get_token_it_on_current_line_type *get_token_it_on_current_line;
STORAGE_CLASS ed_fui_editor_ui_loop_type *fui_editor_ui_loop;
STORAGE_CLASS ed_view_set_buffer_named_type *view_set_buffer_named;
STORAGE_CLASS ed_seek_line_col_type *seek_line_col;
STORAGE_CLASS ed_push_image_type *push_image;
STORAGE_CLASS ed_switch_to_mouse_panel_type *switch_to_mouse_panel;
STORAGE_CLASS ed_mouse_viewport_id_type *mouse_viewport_id;
STORAGE_CLASS ed_get_confirmation_from_user_type *get_confirmation_from_user;
STORAGE_CLASS ed_get_current_line_number_type *get_current_line_number;
STORAGE_CLASS ed_system_get_path_type *system_get_path;
STORAGE_CLASS ed_system_get_file_list_type *system_get_file_list;
STORAGE_CLASS ed_tkarr_read_type *tkarr_read;
STORAGE_CLASS ed_tkarr_inc_type *tkarr_inc;
STORAGE_CLASS ed_token_it_read_type *token_it_read;
STORAGE_CLASS ed_token_it_inc_all_type *token_it_inc_all;
STORAGE_CLASS ed_token_it_inc_type *token_it_inc;
STORAGE_CLASS ed_token_it_dec_type *token_it_dec;
STORAGE_CLASS ed_set_y_up_type *set_y_up;
STORAGE_CLASS ed_draw_new_group_type *draw_new_group;
#undef DYNAMIC_LINK_API
#undef STORAGE_CLASS
#endif
