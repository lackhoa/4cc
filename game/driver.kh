//-Generated: driver.gen.h
typedef u32 argb;
typedef i1  b32;
i1_wrapper(Vertex_Index);
i1_wrapper(Curve_Index);
i1_wrapper(Fill_Index);
enum Bone_Type{
 Bone_None = 0,
 Bone_Head = 1,
 Bone_Arm = 2,
 Bone_Forearm = 3,
 Bone_Bottom_Phalanx = 4,
 Bone_Mid_Phalanx = 5,
 Bone_Top_Phalanx = 6,
 Bone_Torso = 7,
 Bone_References = 8,
 Bone_Hand = 9,
 Bone_Thumb = 10,
 Bone_Pelvis = 11,
};
struct Bone_ID{
 Bone_Type type;
 i1        id;
};
typedef u32 Line_Flags;
enum{
 Line_Overlay  = 0x1,
 Line_Straight = 0x2,
 Line_No_SymX  = 0x4,
};
struct Common_Line_Params{
 v1 radius_mult;  // NOTE(kv) Temporary measure
 v1 nslice_per_meter;
 argb color;
 v1 depth_offset;
 Line_Flags flags;  //NOTE(kv) We do need to store some flags here, though we may not use all the bits, so it's complicated...
 v4 radii;          //NOTE(kv) The default radii
 meta_unserialized i1 linum;
};
struct Line_Params{
 v4 radii;
 v1 visibility;
 v1 alignment_threshold;
 Line_Flags flags;
};
typedef u32 Poly_Flags;
enum{
 Poly_Shaded  = 0x1,  //NOTE: Has to be 1, for compatibility with old code.
 Poly_Line    = 0x2,
 Poly_Overlay = 0x4,
};
struct Fill_Params{
 //NOTE(kv) Might need to make a different set of flags for fill versus polygons.
 //  because the polygon routine is shared by both fills and lines.
 argb color;
 Poly_Flags flags;
};
i1_wrapper(Common_Line_Params_Index);
//-