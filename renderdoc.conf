<?xml version="1.0"?>
<config version="1">
  <AMD>
    <ISA>
      <!-- AMD.ISA.ShowLegacyASICs

Show legacy ASICs for AMD shader disassembly targets. Note that depending on the environment if driver support is required, these may not be available.

Default value: 'False' -->
      <ShowLegacyASICs type="Boolean">false</ShowLegacyASICs>
    </ISA>
    <RGP>
      <!-- AMD.RGP.Enable

Enable integration with AMD's RGP tool.

Default value: 'False' -->
      <Enable type="Boolean">false</Enable>
    </RGP>
    <ags>
      <!-- AMD.ags.AllowUnknownExtensions

Allow extensions that we may not support. This could crash or cause crashes on replay.

Default value: 'False' -->
      <AllowUnknownExtensions type="Boolean">false</AllowUnknownExtensions>
    </ags>
  </AMD>
  <Android>
    <Debug>
      <!-- Android.Debug.ProcessLaunch

Output verbose debug logging messages when launching android apps.

Default value: 'False' -->
      <ProcessLaunch type="Boolean">false</ProcessLaunch>
    </Debug>
    <!-- Android.MaxConnectTimeout

Maximum time in seconds to try connecting to the target app before giving up. Useful primarily for apps that take a very long time to start up.

Default value: '30' -->
    <MaxConnectTimeout type="UnsignedInteger">30</MaxConnectTimeout>
    <!-- Android.SDKDirPath

The location of the root of the Android SDK. This path should contain folders such as build-tools and platform-tools.

Default value: '' -->
    <SDKDirPath type="String"></SDKDirPath>
    <!-- Android.JDKDirPath

The location of the root of the Java JDK. This path should contain folders such as bin and lib.

Default value: '' -->
    <JDKDirPath type="String"></JDKDirPath>
    <!-- Android.AllowAllEGLExtensions

Normally certain extensions are removed from the EGL extension string for compatibility, but with this option that behaviour can be overridden and all extensions will be reported.

Default value: 'False' -->
    <AllowAllEGLExtensions type="Boolean">false</AllowAllEGLExtensions>
  </Android>
  <Capture>
    <Debug>
      <!-- Capture.Debug.SnapshotDiagnosticLog

Snapshot the diagnostic log at capture time and embed in the capture.

Default value: 'False'
DEBUG VARIABLE: Read-only in stable builds. -->
      <SnapshotDiagnosticLog type="Boolean">false</SnapshotDiagnosticLog>
    </Debug>
  </Capture>
  <D3D11>
    <!-- D3D11.HardwareCounters

Enable support for IHV-specific hardware counters on D3D11.

Default value: 'True' -->
    <HardwareCounters type="Boolean">true</HardwareCounters>
  </D3D11>
  <D3D12>
    <Debug>
      <!-- D3D12.Debug.SingleSubmitFlushing

Every command buffer is submitted and fully flushed to the GPU, to narrow down the source of problems.

Default value: 'False'
DEBUG VARIABLE: Read-only in stable builds. -->
      <SingleSubmitFlushing type="Boolean">false</SingleSubmitFlushing>
      <!-- D3D12.Debug.OverlayDumpDirPath

Path to dump quad overdraw patched DXIL files.

Default value: '' -->
      <OverlayDumpDirPath type="String"></OverlayDumpDirPath>
      <!-- D3D12.Debug.PostVSDumpDirPath

Path to dump post mesh shader patched DXIL files.

Default value: '' -->
      <PostVSDumpDirPath type="String"></PostVSDumpDirPath>
      <!-- D3D12.Debug.IgnoreSignatureCheck

Whether to ignore digital signature check for dll's embedded in capture file

Default value: 'False' -->
      <IgnoreSignatureCheck type="Boolean">false</IgnoreSignatureCheck>
      <!-- D3D12.Debug.FeedbackDumpDirPath

Path to dump bindless feedback annotation generated DXBC/DXIL files.

Default value: '' -->
      <FeedbackDumpDirPath type="String"></FeedbackDumpDirPath>
    </Debug>
    <!-- D3D12.HardwareCounters

Enable support for IHV-specific hardware counters on D3D12.

Default value: 'True' -->
    <HardwareCounters type="Boolean">true</HardwareCounters>
    <!-- D3D12.PixelHistory

BETA: Enable D3D12 pixel history support.

Default value: 'False'
DEBUG VARIABLE: Read-only in stable builds. -->
    <PixelHistory type="Boolean">false</PixelHistory>
    <!-- D3D12.D3D12CoreDirPath

The location of the D3D12Core library. This path should be the directory that contains the D3D12Core.dll that you want to use.

Default value: '' -->
    <D3D12CoreDirPath type="String"></D3D12CoreDirPath>
    <!-- D3D12.BindlessFeedback

Enable fetching from GPU which descriptors were dynamically used in descriptor arrays.

Default value: 'True' -->
    <BindlessFeedback type="Boolean">true</BindlessFeedback>
  </D3D12>
  <DXBC>
    <Debug>
      <!-- DXBC.Debug.SearchDirPaths

Paths to search for separated shader debug PDBs.

Default value: '[]' -->
      <SearchDirPaths type="Array" elemtype=""></SearchDirPaths>
    </Debug>
    <Disassembly>
      <!-- DXBC.Disassembly.FriendlyNaming

Where possible (i.e. it is completely unambiguous) replace register names with high-level variable names.

Default value: 'True' -->
      <FriendlyNaming type="Boolean">true</FriendlyNaming>
      <!-- DXBC.Disassembly.ProcessVendorShaderExts

Process vendor shader extensions from magic UAV encoded instructions into the real operations.
If this is disabled, shader debugging won't produce correct results.

Default value: 'True' -->
      <ProcessVendorShaderExts type="Boolean">true</ProcessVendorShaderExts>
    </Disassembly>
  </DXBC>
  <OpenGL>
    <!-- OpenGL.HardwareCounters

Enable support for IHV-specific hardware counters on OpenGL.

Default value: 'True' -->
    <HardwareCounters type="Boolean">true</HardwareCounters>
  </OpenGL>
  <RemoteServer>
    <!-- RemoteServer.TimeoutMS

Timeout in milliseconds for remote server operations.

Default value: '5000' -->
    <TimeoutMS type="UnsignedInteger">5000</TimeoutMS>
    <!-- RemoteServer.DebugLogging

Output a verbose logging file in the system's temporary folder containing the traffic to and from the remote server.

Default value: 'False' -->
    <DebugLogging type="Boolean">false</DebugLogging>
  </RemoteServer>
  <Vulkan>
    <Debug>
      <!-- Vulkan.Debug.UseDebugColumnInformation

Control whether column information should be read from vulkan debug info.

Default value: 'False' -->
      <UseDebugColumnInformation type="Boolean">false</UseDebugColumnInformation>
      <!-- Vulkan.Debug.FeedbackDumpDirPath

Path to dump bindless feedback annotation generated SPIR-V files.

Default value: '' -->
      <FeedbackDumpDirPath type="String"></FeedbackDumpDirPath>
      <!-- Vulkan.Debug.PrintfBufferSize

How many bytes to reserve for a printf output buffer.

Default value: '65536' -->
      <PrintfBufferSize type="UnsignedInteger">65536</PrintfBufferSize>
      <!-- Vulkan.Debug.PostVSDumpDirPath

Path to dump gnerated SPIR-V compute shaders for fetching post-vs.

Default value: '' -->
      <PostVSDumpDirPath type="String"></PostVSDumpDirPath>
      <!-- Vulkan.Debug.PSDebugDumpDirPath

Path to dump pixel shader debugging generated SPIR-V files.

Default value: '' -->
      <PSDebugDumpDirPath type="String"></PSDebugDumpDirPath>
      <!-- Vulkan.Debug.DisableBufferDeviceAddress

Disable use of buffer device address for PS Input fetch.

Default value: 'False' -->
      <DisableBufferDeviceAddress type="Boolean">false</DisableBufferDeviceAddress>
      <!-- Vulkan.Debug.ShaderDebugLogging

Output verbose debug logging messages when debugging shaders.

Default value: 'False' -->
      <ShaderDebugLogging type="Boolean">false</ShaderDebugLogging>
      <!-- Vulkan.Debug.MemoryAllocationLogging

Output verbose debug logging messages when allocating internal memory.

Default value: 'False' -->
      <MemoryAllocationLogging type="Boolean">false</MemoryAllocationLogging>
      <!-- Vulkan.Debug.SingleSubmitFlushing

Every command buffer is submitted and fully flushed to the GPU, to narrow down the source of problems.

Default value: 'False'
DEBUG VARIABLE: Read-only in stable builds. -->
      <SingleSubmitFlushing type="Boolean">false</SingleSubmitFlushing>
      <!-- Vulkan.Debug.VerboseCommandRecording

Add verbose logging around recording and submission of command buffers in vulkan.

Default value: 'False'
DEBUG VARIABLE: Read-only in stable builds. -->
      <VerboseCommandRecording type="Boolean">false</VerboseCommandRecording>
      <!-- Vulkan.Debug.AllowDescriptorSetReuse

Allow the re-use of descriptor sets via vkResetDescriptorPool.

Default value: 'True'
DEBUG VARIABLE: Read-only in stable builds. -->
      <AllowDescriptorSetReuse type="Boolean">true</AllowDescriptorSetReuse>
      <!-- Vulkan.Debug.ReplaceAppInfo

By default we have no choice but to replace VkApplicationInfo to safely work on all drivers. This behaviour can be disabled with this flag, which lets it through both during capture and on replay.

Default value: 'True' -->
      <ReplaceAppInfo type="Boolean">true</ReplaceAppInfo>
    </Debug>
    <Hack>
      <!-- Vulkan.Hack.AllowNonUniformSubgroups

Allow shaders to be debugged with subgroup ops. Most subgroup ops will break, this will only work for a limited set and not with the 'real' subgroup.

Default value: 'False' -->
      <AllowNonUniformSubgroups type="Boolean">false</AllowNonUniformSubgroups>
    </Hack>
    <!-- Vulkan.BindlessFeedback

Enable fetching from GPU which descriptors were dynamically used in descriptor arrays.

Default value: 'True' -->
    <BindlessFeedback type="Boolean">true</BindlessFeedback>
    <!-- Vulkan.PrintfFetch

Enable fetching printf messages from GPU.

Default value: 'True' -->
    <PrintfFetch type="Boolean">true</PrintfFetch>
    <!-- Vulkan.HardwareCounters

Enable support for IHV-specific hardware counters on Vulkan.

Default value: 'True' -->
    <HardwareCounters type="Boolean">true</HardwareCounters>
    <!-- Vulkan.GPUReadbackDeviceLocal

When reading back mapped device-local memory, use a GPU copy instead of a CPU side comparison directly to mapped memory.

Default value: 'True' -->
    <GPUReadbackDeviceLocal type="Boolean">true</GPUReadbackDeviceLocal>
  </Vulkan>
</config>
